filter {

  if [@metadata][stage] == 'bro_json' {

    mutate {
      # Add ECS Event fields and fields ahead of time that we need but may not exist
      add_field => {
        "[event][module]" => "bro"
        "[event][created]" => "%{[@timestamp]}"
        "[event][version]" => "1.0.0"
        "[related][id]" => []
        "[related][ip]" => []
        "[related][domain]" => []
        "[related][mac]" => []
        "[related][user]" => []
        "[related][vlan_id]" => []
      }
      rename => {
        "@stream" => "[event][dataset]"
        "@system" => "[observer][hostname]"
        "@proc"   => "[observer][sub_process]"
      }
      replace => { "[@metadata][stage]" => "bro_category" }
    }

    # Set the timestamp from the event
    date {
      match => [ "ts", "ISO8601" ]
      # Even though RockNSM defaults to UTC, we want to set UTC for other implementations/possibilities
      timezone => "UTC"
      target => "@timestamp"
      tag_on_failure => [ "_dateparsefailure", "_parsefailure", "_bro_dateparsefailure" ]
      remove_field => [ "ts" ]
    }

    # Majority renames whether they exist or not, it's not expensive if they are not and a better catch all then to guess/try to make sure have the 30+ log types later on.
    # Will get more specific with UIDs later, if necessary, but majority will be OK with these.
    mutate {
      rename => {
        "proto" => "[network][transport]"
        "vlan" => "[vlan][outer][id]"
        "id_vlan" => "[vlan][inner][id]"
        "inner_vlan" => "[vlan][inner][id]"
        "outer_vlan" => "[vlan][outer][id]"
        "cert_chain_fuids" => "[log][id][cert_chain_fuids]"
        "client_cert_chain_fuids" => "[log][id][client_cert_chain_fuids]"
        "client_cert_fuid" => "[log][id][client_cert_fuid]"
        "conn_uids" => "[log][id][conn_uids]"
        "fid" => "[log][id][fid]"
        "fuid" => "[log][id][fuid]"
        "fuids" => "[log][id][fuids]"
        "id" => "[log][id][id]"
        "orig_fuids" => "[log][id][orig_fuids]"
        "parent_fuid" => "[log][id][parent_fuid]"
        "related_fuids" => "[log][id][related_fuids]"
        "resp_fuids" => "[log][id][resp_fuids]"
        "server_cert_fuid" => "[log][id][server_cert_fuid]"
        "uid" => "[log][id][uid]"
        "uids" => "[log][id][uids]"
        "uuid" => "[log][id][uuid]"
      }
    }

    # Since this is the most common ID lets merge it ahead of time if it exists, so don't have to perform one of cases for it
    if [log][id][uid] {
      mutate { merge => { "[related][id]" => "[log][id][uid]" } }
    }

    if [id_orig_h] {
      mutate {
        rename => {
          "id_orig_h" => "[client][address]"
          "id_orig_p" => "[client][port]"
          "id_resp_h" => "[server][address]"
          "id_resp_p" => "[server][port]"
        }
        # ECS standard has the address field copied to the appropriate field
        copy => {
          "[client][address]" => "[client][ip]"
          "[server][address]" => "[server][ip]"
        }
      }
    }

    # Nest the entire document
    ruby {
      code => '
        require "logstash/event"

        # Keep metadata, this is important for pipeline distinctions when future additions outside of rock default log sources as well as logstash usage in general
        meta_data_hash = event.get("@metadata").to_hash
        # Keep tags for logstash usage and some bro logs use tags field
        event_tags = event.get("tags")

        logtype = event.get("[event][dataset]")

        ev_hash = event.to_hash

        event_hash = ev_hash["event"]
        client_hash = ev_hash["client"]
        log_hash = ev_hash["log"]
        network_hash = ev_hash["network"]
        observer_hash = ev_hash["observer"]
        related_hash = ev_hash["related"]
        server_hash = ev_hash["server"]
        vlan_hash = ev_hash["vlan"]
        timestamp = ev_hash["@timestamp"]

        # Cleanup duplicate info
        ev_hash.delete("client")
        ev_hash.delete("event")
        ev_hash.delete("log")
        ev_hash.delete("network")
        ev_hash.delete("observer")
        ev_hash.delete("related")
        ev_hash.delete("server")
        ev_hash.delete("vlan")
        ev_hash.delete("@timestamp")
        ev_hash.delete("@version")
        ev_hash.delete("tags")

        result = {
          "@metadata" => meta_data_hash,
          "tags" => event_tags,
          logtype => ev_hash,
          "event" => event_hash,
          "log" => log_hash,
          "client" => client_hash,
          "network" => network_hash,
          "observer" => observer_hash,
          "related" => related_hash,
          "server" => server_hash,
          "vlan" => vlan_hash,
          "@timestamp" => timestamp
        }
        event.initialize( result )
      '
    }

    # Remove field sweeps if they are blank
    ruby {
      code => '
        client_value = event.get("client")
        network_value = event.get("network")
        related_value = event.get("related")
        server_value = event.get("server")
        vlan_value = event.get("vlan")
        event.remove("client") if client_value.nil? || (client_value.respond_to?(:empty?) && client_value.empty?)
        event.remove("network") if network_value.nil? || (network_value.respond_to?(:empty?) && network_value.empty?)
        event.remove("related") if related_value.nil? || (related_value.respond_to?(:empty?) && related_value.empty?)
        event.remove("server") if server_value.nil? || (server_value.respond_to?(:empty?) && server_value.empty?)
        event.remove("vlan") if vlan_value.nil? || (vlan_value.respond_to?(:empty?) && vlan_value.empty?)
      '
    }

  }
}
